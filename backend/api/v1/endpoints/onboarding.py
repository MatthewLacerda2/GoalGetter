from sqlalchemy.ext.asyncio import AsyncSession
from fastapi import APIRouter, Depends, HTTPException
import asyncio
from backend.models.goal import Goal
from backend.core.database import get_db
from backend.models.student import Student
from backend.models.objective import Objective
from backend.core.security import get_current_user
from backend.schemas.student import StudentCurrentStatusResponse
from backend.utils.gemini.gemini_configs import get_gemini_embeddings
from backend.schemas.goal import GoalCreationFollowUpQuestionsRequest, GoalCreationFollowUpQuestionsResponse, GoalStudyPlanRequest, GoalStudyPlanResponse, GoalFullCreationRequest
from backend.utils.gemini.onboarding.onboarding import get_gemini_follow_up_questions, get_gemini_study_plan

router = APIRouter()

@router.post(
    "/follow_up_questions",
    status_code=201,
    response_model=GoalCreationFollowUpQuestionsResponse,
    description="Initiate the onboarding process by analyzing the user's goal prompt and generating follow-up questions.")
async def generate_follow_up_questions(request: GoalCreationFollowUpQuestionsRequest, user: Student = Depends(get_current_user)):
    
    if user.goal_name is not None:
        raise HTTPException(status_code=400, detail="User already has a goal")
    
    return get_gemini_follow_up_questions(request)

@router.post(
    "/study_plan",
    status_code=201,
    response_model=GoalStudyPlanResponse,
    description="Receive the Study Plan generated by the AI.")
async def generate_study_plan(request: GoalStudyPlanRequest, user: Student = Depends(get_current_user)):
    
    if user.goal_name is not None:
        raise HTTPException(status_code=400, detail="User already has a goal")
    
    return get_gemini_study_plan(request)

@router.post(
    "/full_creation",
    status_code=201,
    response_model=StudentCurrentStatusResponse,
    description="Receive the Full Creation generated by the AI.")
async def generate_full_creation(
    request: GoalFullCreationRequest,
    user: Student = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    
    if user.goal_name is not None:
        raise HTTPException(status_code=400, detail="User already has a goal")

    goal = Goal(
        name=request.goal_name,
        description=request.goal_description,
    )
    
    db.add(goal)
    await db.commit()
    await db.refresh(goal)
    
    objective = Objective(
        goal_id=goal.id,
        name=request.first_objective_name,
        description=request.first_objective_description
    )
    
    db.add(objective)
    await db.commit()
    await db.refresh(objective)
    
    asyncio.create_task(
        save_description_embeddings_async(goal, objective, db)
    )
    
    return StudentCurrentStatusResponse(
        student_id=user.id,
        student_name=user.name,
        student_email=user.email,
        current_streak=user.current_streak,
        overall_xp=user.overall_xp,
        goal_id=goal.id,
        goal_name=goal.name,
    )

async def save_description_embeddings_async(goal: Goal, objective: Objective, db: AsyncSession):
    goal_description_embedding = get_gemini_embeddings(goal.description)
    objective_description_embedding = get_gemini_embeddings(objective.description)
    goal.description_embedding = goal_description_embedding
    objective.description_embedding = objective_description_embedding
    await db.commit()
    await db.refresh(goal)
    await db.refresh(objective)