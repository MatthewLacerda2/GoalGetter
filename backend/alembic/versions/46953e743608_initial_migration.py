"""Initial migration

Revision ID: 46953e743608
Revises: 
Create Date: 2025-10-02 21:48:45.683643

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy


# revision identifiers, used by Alembic.
revision: str = '46953e743608'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create pgvector extension first
    op.execute('CREATE EXTENSION IF NOT EXISTS vector')
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('goals',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('description_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('achievements',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('goal_id', sa.String(length=36), nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('objectives',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('goal_id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('percentage_completed', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_updated_at', sa.DateTime(), nullable=False),
    sa.Column('description_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('multiple_choice_questions',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('objective_id', sa.String(length=36), nullable=False),
    sa.Column('question', sa.String(), nullable=False),
    sa.Column('choices', sa.JSON(), nullable=False),
    sa.Column('correct_answer_index', sa.Integer(), nullable=False),
    sa.Column('student_answer_index', sa.Integer(), nullable=True),
    sa.Column('seconds_spent', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_updated_at', sa.DateTime(), nullable=True),
    sa.Column('xp', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['objective_id'], ['objectives.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('objective_notes',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('objective_id', sa.String(length=36), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('info', sa.String(), nullable=False),
    sa.Column('is_favorited', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('info_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.ForeignKeyConstraint(['objective_id'], ['objectives.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('resources',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('goal_id', sa.String(length=36), nullable=False),
    sa.Column('objective_id', sa.String(length=36), nullable=True),
    sa.Column('resource_type', sa.Enum('pdf', 'webpage', 'youtube', name='studyresourcetype'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('language', sa.String(), nullable=False),
    sa.Column('link', sa.String(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('description_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=False),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.ForeignKeyConstraint(['objective_id'], ['objectives.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('link')
    )
    op.create_table('students',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('google_id', sa.String(), nullable=False),
    sa.Column('goal_id', sa.String(length=36), nullable=False),
    sa.Column('goal_name', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=False),
    sa.Column('current_streak', sa.Integer(), nullable=False),
    sa.Column('longest_streak', sa.Integer(), nullable=False),
    sa.Column('current_objective_id', sa.String(length=36), nullable=False),
    sa.Column('current_objective_name', sa.String(), nullable=False),
    sa.Column('overall_xp', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['current_objective_id'], ['objectives.id'], ),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('google_id')
    )
    op.create_table('subjective_questions',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('objective_id', sa.String(length=36), nullable=False),
    sa.Column('question', sa.String(), nullable=False),
    sa.Column('student_answer', sa.String(), nullable=True),
    sa.Column('llm_approval', sa.Boolean(), nullable=True),
    sa.Column('llm_evaluation', sa.String(), nullable=True),
    sa.Column('llm_evaluation_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.Column('llm_metacognition', sa.String(), nullable=True),
    sa.Column('llm_metacognition_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.Column('xp', sa.Integer(), nullable=True),
    sa.Column('seconds_spent', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['objective_id'], ['objectives.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('chat_messages',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('student_id', sa.String(length=36), nullable=False),
    sa.Column('sender_id', sa.String(length=36), nullable=False),
    sa.Column('array_id', sa.String(length=36), nullable=True),
    sa.Column('message', sa.String(), nullable=False),
    sa.Column('is_liked', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('message_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player_achievements',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('student_id', sa.String(length=36), nullable=False),
    sa.Column('achievement_id', sa.String(length=36), nullable=False),
    sa.Column('achieved_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievements.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('streak_days',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('student_id', sa.String(length=36), nullable=False),
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.Column('xp', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('student_contexts',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('student_id', sa.String(length=36), nullable=False),
    sa.Column('goal_id', sa.String(length=36), nullable=False),
    sa.Column('objective_id', sa.String(length=36), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('is_still_valid', sa.Boolean(), nullable=False),
    sa.Column('state', sa.String(), nullable=False),
    sa.Column('state_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.Column('metacognition', sa.String(), nullable=False),
    sa.Column('metacognition_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=3072), nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.ForeignKeyConstraint(['objective_id'], ['objectives.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('student_contexts')
    op.drop_table('streak_days')
    op.drop_table('player_achievements')
    op.drop_table('chat_messages')
    op.drop_table('subjective_questions')
    op.drop_table('students')
    op.drop_table('resources')
    op.drop_table('objective_notes')
    op.drop_table('multiple_choice_questions')
    op.drop_table('objectives')
    op.drop_table('achievements')
    op.drop_table('goals')
    # ### end Alembic commands ###
